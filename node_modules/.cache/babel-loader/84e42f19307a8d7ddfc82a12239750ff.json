{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/taylo/source/react/Legato/sj2legato/savelegato/src/view/metro.js\";\nimport React, { Component } from \"react\";\nimport Slider from './slider.js';\nimport '../pages/pages.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Metro extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = event => {\n      const {\n        name,\n        value\n      } = event.target;\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.state = {\n      bpm: 100,\n      playing: false,\n      count: 0,\n      tooSmall: false,\n      marginTop: \"200px\",\n      margint: \"\",\n      screensize: \"\",\n      maxHeight: \"700px\",\n      splashscreen: true\n    };\n    this.click1 = new Audio(\"https://daveceddia.com/freebies/react-metronome/click1.wav\");\n    this.click2 = new Audio(\"https://daveceddia.com/freebies/react-metronome/click1.wav\");\n    this.handleBPM = this.handleBPM.bind(this);\n    this.updateInterval = this.updateInterval.bind(this);\n    this.startStop = this.startStop.bind(this);\n    this.playClick = this.playClick.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n    this.Splashscreen = this.Splashscreen.bind(this);\n  }\n\n  Splashscreen() {\n    this.setState({\n      splashscreen: false\n    });\n  }\n\n  updateWindowDimensions() {\n    this.setState({\n      screensize: window.innerWidth\n    });\n    if (parseInt(window.innerWidth) <= 800) this.setState({\n      tooSmall: true,\n      marginTop: \"20px\",\n      margint: \"00px\",\n      maxHeight: \"400px\",\n      margint: \"50px\"\n    });\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.updateWindowDimensions);\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"resize\", this.updateWindowDimensions());\n  }\n\n  updateInterval() {\n    const bmpSpeed = 60 * 1000 / this.state.bpm;\n    this.timer = setInterval(this.playClick, bmpSpeed);\n  }\n\n  handleBPM(event) {\n    const bpm = event.target.value;\n\n    if (this.state.playing) {\n      clearInterval(this.timer);\n      this.updateInterval();\n      this.setState({\n        count: 0,\n        bpm\n      });\n    } else {\n      this.setState({\n        bpm\n      });\n    }\n\n    ;\n  }\n\n  playClick() {\n    if (this.state.count === 0) this.click2.play();else this.click1.play();\n    this.setState({\n      count: this.state.count + 1\n    });\n  }\n\n  startStop() {\n    if (this.state.playing) {\n      clearInterval(this.timer);\n      this.setState({\n        playing: false\n      });\n    } else {\n      this.updateInterval();\n      this.setState({\n        count: 0,\n        playing: true\n      }, this.playClick);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"smallcard\",\n      style: {\n        marginTop: this.props.state.styles.margins.margin1,\n        display: \"flex\",\n        flexDirection: \"column\",\n        padding: \"5px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          flexDirection: \"column\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Slider, {\n            bpm: this.state.bpm,\n            handleChange: this.handleBPM,\n            handleChanges: this.handleChange,\n            tooSmall: this.state.screensize\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 30\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"centerized btn\",\n            style: {\n              background: \"#696eb5\",\n              height: \"35px\",\n              color: \"#F0F2EF\",\n              width: \"85px\",\n              marginTop: \"50px\"\n            },\n            onClick: this.startStop,\n            children: this.state.playing ? \"Stop\" : \"Start\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Metro;","map":{"version":3,"sources":["/mnt/c/Users/taylo/source/react/Legato/sj2legato/savelegato/src/view/metro.js"],"names":["React","Component","Slider","Metro","constructor","props","handleChange","event","name","value","target","setState","state","bpm","playing","count","tooSmall","marginTop","margint","screensize","maxHeight","splashscreen","click1","Audio","click2","handleBPM","bind","updateInterval","startStop","playClick","updateWindowDimensions","Splashscreen","window","innerWidth","parseInt","componentWillUnmount","removeEventListener","componentDidMount","addEventListener","bmpSpeed","timer","setInterval","clearInterval","play","render","styles","margins","margin1","display","flexDirection","padding","background","height","color","width"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Slider from './slider.js';\r\nimport '../pages/pages.css';\r\n\r\n\r\nclass Metro extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            bpm: 100,\r\n            playing: false,\r\n            count: 0,\r\n            tooSmall: false,\r\n            marginTop: \"200px\",\r\n            margint: \"\",\r\n            screensize: \"\",\r\n            maxHeight:\"700px\",\r\n            splashscreen:true,\r\n\r\n        }\r\n        this.click1 = new Audio(\"https://daveceddia.com/freebies/react-metronome/click1.wav\");\r\n        this.click2 = new Audio(\"https://daveceddia.com/freebies/react-metronome/click1.wav\");\r\n        this.handleBPM = this.handleBPM.bind(this);\r\n        this.updateInterval = this.updateInterval.bind(this);\r\n        this.startStop = this.startStop.bind(this);\r\n        this.playClick = this.playClick.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\r\n        this.Splashscreen = this.Splashscreen.bind(this);\r\n\r\n        \r\n    }\r\n    Splashscreen(){\r\n        this.setState({splashscreen:false})\r\n    }\r\n    updateWindowDimensions() {\r\n        this.setState({screensize: window.innerWidth})\r\n        if(parseInt(window.innerWidth) <= 800)\r\n        this.setState({ \r\n            tooSmall: true,\r\n            marginTop: \"20px\",\r\n        margint: \"00px\", \r\n        maxHeight:\"400px\",\r\n        margint: \"50px\",\r\n    });\r\n     }\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"resize\", this.updateWindowDimensions)\r\n    } \r\n    componentDidMount() {\r\n        window.addEventListener(\"resize\", this.updateWindowDimensions());\r\n    }\r\n\r\n\r\n    updateInterval() {\r\n        const bmpSpeed = 60 * 1000 / this.state.bpm;\r\n        this.timer = setInterval(this.playClick, bmpSpeed);\r\n    }\r\n\r\n    handleBPM(event) {\r\n        const bpm = event.target.value;\r\n        if (this.state.playing) {\r\n            clearInterval(this.timer);\r\n            this.updateInterval();\r\n            this.setState({\r\n                count: 0,\r\n                bpm\r\n            });\r\n        } else {\r\n            this.setState({\r\n                bpm\r\n            });\r\n        };\r\n    }\r\n    handleChange = (event) => {\r\n        const { name, value } = event.target\r\n\r\n\r\n        this.setState({\r\n            [name]: value,\r\n        })\r\n\r\n        \r\n        \r\n\r\n\r\n    }\r\n\r\n    playClick() {\r\n        if (this.state.count === 0) this.click2.play();\r\n        else this.click1.play();\r\n        this.setState({\r\n            count: this.state.count + 1\r\n        });\r\n    }\r\n\r\n    startStop() {\r\n        if (this.state.playing) {\r\n            clearInterval(this.timer);\r\n            this.setState({\r\n                playing: false\r\n            });\r\n        } else {\r\n            this.updateInterval();\r\n            this.setState({\r\n                count: 0,\r\n                playing: true\r\n            }, this.playClick)\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        \r\n        return (\r\n            \r\n            \r\n\r\n            <div className= \"smallcard\" style={{marginTop:this.props.state.styles.margins.margin1, display:\"flex\", flexDirection:\"column\", padding:\"5px\" }}>\r\n                <div style={{display:\"flex\", flexDirection:\"column\", }}>                \r\n                        <div><Slider bpm={this.state.bpm} handleChange={this.handleBPM} handleChanges={this.handleChange} tooSmall={this.state.screensize}/>\r\n                        <button className=\"centerized btn\" style={{ background: \"#696eb5\", height: \"35px\", color: \"#F0F2EF\", width: \"85px\", marginTop: \"50px\"  }} onClick={this.startStop} >\r\n                {this.state.playing ? \"Stop\" : \"Start\"}\r\n            </button>\r\n                        </div></div>\r\n                </div>\r\n\r\n        );\r\n    }\r\n}\r\nexport default Metro;\r\n"]},"metadata":{},"sourceType":"module"}