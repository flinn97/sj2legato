{"ast":null,"code":"class studentSevice {\n  /**\r\n   * \r\n   * @param {*} goal \r\n   * @param {*} maingoals \r\n   * @param {*} mainGoal \r\n   * @param {*} add \r\n   * @param {*} del \r\n   * @returns new updated list of a students goals.\r\n   */\n  updateAddGoals(goal, maingoals, mainGoal, myswitch) {\n    debugger;\n    let mainG = mainGoal;\n    let currentmains = maingoals;\n    let i = this.compare(maingoals, mainG);\n    let j = this.compare(mainG.mainGoal.goals, goal ? goal : {\n      id: 1\n    }, true);\n\n    switch (myswitch) {\n      case \"addmain\":\n        currentmains.push(mainG);\n        break;\n\n      case \"addgoal\":\n        currentmains[i].mainGoal.goals.push(goal);\n        break;\n\n      case \"delmain\":\n        currentmains.splice(i, 1);\n        break;\n\n      case \"delgoal\":\n        currentmains[i].mainGoal.goals.splice(j, 1);\n        break;\n\n      case \"updatemain\":\n        currentmains[i] = mainG;\n        break;\n\n      case \"updategoal\":\n        currentmains[i].mainGoal.goals[j] = goal;\n        break;\n    }\n\n    return currentmains;\n  }\n  /**\r\n   * \r\n   * @param {*} homework \r\n   * @param {*} homeworks \r\n   * @param {*} myswitch \r\n   * @returns updated homework array\r\n   */\n\n\n  updateAdddelhomework(homework, homeworks, myswitch) {\n    debugger;\n    let myhomework = homework;\n    let myhomeworks = homeworks;\n    let i = this.compare(myhomeworks, myhomework, true);\n\n    switch (myswitch) {\n      case \"addhomework\":\n        myhomeworks.push(myhomework);\n        break;\n\n      case \"delhomework\":\n        myhomeworks.splice(i, 1);\n        break;\n\n      case \"updatehomework\":\n        myhomeworks[i] = homework;\n        break;\n    }\n\n    return myhomeworks;\n  }\n\n  updateAddDelnotes(note, notes, myswitch) {\n    debugger;\n    let mynote = note;\n    let mynotes = notes;\n    let i = this.compare(mynotes, mynote, true);\n\n    switch (myswitch) {\n      case \"addnote\":\n        mynotes.push(mynote);\n        break;\n\n      case \"delnote\":\n        mynotes.splice(i, 1);\n        break;\n\n      case \"updatenote\":\n        mynotes[i] = mynote;\n        break;\n    }\n\n    return mynotes;\n  }\n  /**\r\n   * \r\n   * @param {*} compare \r\n   * @param {*} compare1 \r\n   * @param {*} condition \r\n   * @returns i for the compaired two values\r\n   */\n\n\n  compare(compare, compare1, condition) {\n    debugger;\n    let value;\n\n    for (let i = 0; i < compare.length; i++) {\n      if (!condition) {\n        if (compare1._id ? compare[i]._id === compare1._id : compare[i].mainGoal.id === compare1.mainGoal.id) {\n          value = i;\n          break;\n        }\n      } else if (condition) {\n        if (compare1._id ? compare[i]._id === compare1._id : compare[i].id === compare1.id) {\n          value = i;\n          break;\n        }\n      } else {\n        value = false;\n      }\n    }\n\n    return value;\n  }\n\n}\n\nexport default new studentSevice();","map":{"version":3,"sources":["/mnt/c/Users/taylo/source/react/Legato/sj2legato/savelegato/src/services/studentService.js"],"names":["studentSevice","updateAddGoals","goal","maingoals","mainGoal","myswitch","mainG","currentmains","i","compare","j","goals","id","push","splice","updateAdddelhomework","homework","homeworks","myhomework","myhomeworks","updateAddDelnotes","note","notes","mynote","mynotes","compare1","condition","value","length","_id"],"mappings":"AACA,MAAMA,aAAN,CAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,EAAAA,cAAc,CAACC,IAAD,EAAOC,SAAP,EAAkBC,QAAlB,EAA4BC,QAA5B,EAAuC;AACjD;AACA,QAAIC,KAAK,GAAGF,QAAZ;AACA,QAAIG,YAAY,GAAEJ,SAAlB;AACA,QAAIK,CAAC,GAAC,KAAKC,OAAL,CAAaN,SAAb,EAAwBG,KAAxB,CAAN;AACA,QAAII,CAAC,GAAE,KAAKD,OAAL,CAAaH,KAAK,CAACF,QAAN,CAAeO,KAA5B,EAAmCT,IAAI,GAAEA,IAAF,GAAQ;AAACU,MAAAA,EAAE,EAAC;AAAJ,KAA/C,EAAuD,IAAvD,CAAP;;AACA,YAAOP,QAAP;AACI,WAAK,SAAL;AACIE,QAAAA,YAAY,CAACM,IAAb,CAAkBP,KAAlB;AACA;;AACJ,WAAK,SAAL;AACIC,QAAAA,YAAY,CAACC,CAAD,CAAZ,CAAgBJ,QAAhB,CAAyBO,KAAzB,CAA+BE,IAA/B,CAAoCX,IAApC;AACA;;AACJ,WAAK,SAAL;AACIK,QAAAA,YAAY,CAACO,MAAb,CAAoBN,CAApB,EAAuB,CAAvB;AACA;;AACJ,WAAK,SAAL;AACID,QAAAA,YAAY,CAACC,CAAD,CAAZ,CAAgBJ,QAAhB,CAAyBO,KAAzB,CAA+BG,MAA/B,CAAsCJ,CAAtC,EAAyC,CAAzC;AACA;;AACJ,WAAK,YAAL;AACIH,QAAAA,YAAY,CAACC,CAAD,CAAZ,GAAiBF,KAAjB;AACA;;AACJ,WAAK,YAAL;AACIC,QAAAA,YAAY,CAACC,CAAD,CAAZ,CAAgBJ,QAAhB,CAAyBO,KAAzB,CAA+BD,CAA/B,IAAmCR,IAAnC;AACA;AAlBR;;AAqBA,WAAOK,YAAP;AACC;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIQ,EAAAA,oBAAoB,CAACC,QAAD,EAAWC,SAAX,EAAsBZ,QAAtB,EAAiC;AACjD;AACA,QAAIa,UAAU,GAAGF,QAAjB;AACA,QAAIG,WAAW,GAAGF,SAAlB;AACA,QAAIT,CAAC,GAAC,KAAKC,OAAL,CAAaU,WAAb,EAA0BD,UAA1B,EAAsC,IAAtC,CAAN;;AACA,YAAOb,QAAP;AACI,WAAK,aAAL;AACIc,QAAAA,WAAW,CAACN,IAAZ,CAAiBK,UAAjB;AACA;;AACJ,WAAK,aAAL;AACIC,QAAAA,WAAW,CAACL,MAAZ,CAAmBN,CAAnB,EAAsB,CAAtB;AACA;;AACJ,WAAK,gBAAL;AACIW,QAAAA,WAAW,CAACX,CAAD,CAAX,GAAgBQ,QAAhB;AACA;AATR;;AAWA,WAAOG,WAAP;AACH;;AACDC,EAAAA,iBAAiB,CAACC,IAAD,EAAOC,KAAP,EAAcjB,QAAd,EAAuB;AACpC;AACA,QAAIkB,MAAM,GAAGF,IAAb;AACA,QAAIG,OAAO,GAAGF,KAAd;AACA,QAAId,CAAC,GAAC,KAAKC,OAAL,CAAae,OAAb,EAAsBD,MAAtB,EAA8B,IAA9B,CAAN;;AACA,YAAOlB,QAAP;AACI,WAAK,SAAL;AACImB,QAAAA,OAAO,CAACX,IAAR,CAAaU,MAAb;AACA;;AACJ,WAAK,SAAL;AACIC,QAAAA,OAAO,CAACV,MAAR,CAAeN,CAAf,EAAkB,CAAlB;AACA;;AACJ,WAAK,YAAL;AACIgB,QAAAA,OAAO,CAAChB,CAAD,CAAP,GAAYe,MAAZ;AACA;AATR;;AAWA,WAAOC,OAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIf,EAAAA,OAAO,CAACA,OAAD,EAAUgB,QAAV,EAAoBC,SAApB,EAA8B;AACjC;AACA,QAAIC,KAAJ;;AACA,SAAI,IAAInB,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACC,OAAO,CAACmB,MAAvB,EAA+BpB,CAAC,EAAhC,EAAmC;AAC/B,UAAG,CAACkB,SAAJ,EAAc;AACd,YAAID,QAAQ,CAACI,GAAT,GAAcpB,OAAO,CAACD,CAAD,CAAP,CAAWqB,GAAX,KAAkBJ,QAAQ,CAACI,GAAzC,GAA+CpB,OAAO,CAACD,CAAD,CAAP,CAAWJ,QAAX,CAAoBQ,EAApB,KAA0Ba,QAAQ,CAACrB,QAAT,CAAkBQ,EAA/F,EAAoG;AAC5Fe,UAAAA,KAAK,GAAEnB,CAAP;AACA;AACP;AACA,OALD,MAMK,IAAGkB,SAAH,EAAa;AACd,YAAGD,QAAQ,CAACI,GAAT,GAAcpB,OAAO,CAACD,CAAD,CAAP,CAAWqB,GAAX,KAAkBJ,QAAQ,CAACI,GAAzC,GAA+CpB,OAAO,CAACD,CAAD,CAAP,CAAWI,EAAX,KAAiBa,QAAQ,CAACb,EAA5E,EAA+E;AAC/Ee,UAAAA,KAAK,GAAEnB,CAAP;AACA;AACC;AACJ,OALI,MAMD;AACAmB,QAAAA,KAAK,GAAE,KAAP;AACH;AACJ;;AACD,WAAOA,KAAP;AACH;;AA9Ge;;AAmHpB,eAAe,IAAI3B,aAAJ,EAAf","sourcesContent":["\r\nclass studentSevice {\r\n/**\r\n * \r\n * @param {*} goal \r\n * @param {*} maingoals \r\n * @param {*} mainGoal \r\n * @param {*} add \r\n * @param {*} del \r\n * @returns new updated list of a students goals.\r\n */\r\nupdateAddGoals(goal, maingoals, mainGoal, myswitch ) {\r\n    debugger\r\n    let mainG = mainGoal;\r\n    let currentmains= maingoals;\r\n    let i=this.compare(maingoals, mainG)\r\n    let j= this.compare(mainG.mainGoal.goals, goal? goal: {id:1}, true)\r\n    switch(myswitch){\r\n        case \"addmain\":\r\n            currentmains.push(mainG);\r\n            break;\r\n        case \"addgoal\":\r\n            currentmains[i].mainGoal.goals.push(goal);\r\n            break;\r\n        case \"delmain\":\r\n            currentmains.splice(i, 1);\r\n            break;\r\n        case \"delgoal\":\r\n            currentmains[i].mainGoal.goals.splice(j, 1);\r\n            break;\r\n        case \"updatemain\":\r\n            currentmains[i]= mainG;\r\n            break;\r\n        case \"updategoal\":\r\n            currentmains[i].mainGoal.goals[j]= goal\r\n            break\r\n\r\n    }\r\n    return currentmains\r\n    }\r\n    /**\r\n     * \r\n     * @param {*} homework \r\n     * @param {*} homeworks \r\n     * @param {*} myswitch \r\n     * @returns updated homework array\r\n     */\r\n    updateAdddelhomework(homework, homeworks, myswitch ) {\r\n        debugger\r\n        let myhomework = homework;\r\n        let myhomeworks = homeworks;\r\n        let i=this.compare(myhomeworks, myhomework, true)\r\n        switch(myswitch){\r\n            case \"addhomework\":\r\n                myhomeworks.push(myhomework);\r\n                break;\r\n            case \"delhomework\":\r\n                myhomeworks.splice(i, 1);\r\n                break;\r\n            case \"updatehomework\":\r\n                myhomeworks[i]= homework;\r\n                break;\r\n        }\r\n        return myhomeworks\r\n    }\r\n    updateAddDelnotes(note, notes, myswitch){\r\n        debugger\r\n        let mynote = note;\r\n        let mynotes = notes;\r\n        let i=this.compare(mynotes, mynote, true)\r\n        switch(myswitch){\r\n            case \"addnote\":\r\n                mynotes.push(mynote);\r\n                break;\r\n            case \"delnote\":\r\n                mynotes.splice(i, 1);\r\n                break;\r\n            case \"updatenote\":\r\n                mynotes[i]= mynote;\r\n                break;\r\n        }\r\n        return mynotes\r\n    }\r\n    /**\r\n     * \r\n     * @param {*} compare \r\n     * @param {*} compare1 \r\n     * @param {*} condition \r\n     * @returns i for the compaired two values\r\n     */\r\n    compare(compare, compare1, condition){\r\n        debugger\r\n        let value;\r\n        for(let i=0; i<compare.length; i++){\r\n            if(!condition){\r\n            if((compare1._id? compare[i]._id=== compare1._id : compare[i].mainGoal.id=== compare1.mainGoal.id) ){\r\n                    value= i\r\n                    break;\r\n            }\r\n            }\r\n            else if(condition){\r\n                if(compare1._id? compare[i]._id=== compare1._id : compare[i].id=== compare1.id){\r\n                value= i\r\n                break;\r\n                }\r\n            }\r\n            else{\r\n                value= false\r\n            }\r\n        }\r\n        return value\r\n    }\r\n\r\n \r\n}\r\n\r\nexport default new studentSevice();"]},"metadata":{},"sourceType":"module"}