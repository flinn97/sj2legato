{"ast":null,"code":"class studentSevice {\n  /**\r\n   * \r\n   * @param {*} goal \r\n   * @param {*} maingoals \r\n   * @param {*} mainGoal \r\n   * @param {*} add \r\n   * @param {*} del \r\n   * @returns new updated list of a students goals.\r\n   */\n  updateAddGoals(goal, maingoals, mainGoal, myswitch) {\n    debugger;\n    let mainG = mainGoal;\n    let currentmains = maingoals;\n    let ob = {\n      addmain: currentmains.push(mainG),\n      addgoal: currentmains[this.goalhelper(maingoals, mainG)].goals.push(goal),\n      updatemain: currentmains[this.goalhelper(maingoals, mainG)] = mainG,\n      updategoal: currentmains[this.goalhelper(maingoals, mainG)].goals[this.goalhelper(mainG.goals, goal)] = goal,\n      delmain: currentmains[this.goalhelper(maingoals, mainG)].splice(i, 1),\n      delgoal: currentmains[this.goalhelper(maingoals, mainG)].goals[this.goalhelper(mainG.goals, goal)].splice(i, 1)\n    };\n    let func = ob[myswitch];\n    return currentmains;\n  }\n\n  goalhelper(compare, compare1) {\n    let value;\n\n    for (let i = 0; i < compare.length; i++) {\n      if (compare[i]._id === compare1._id) {\n        value = i;\n      } else {\n        value = false;\n      }\n    }\n\n    return i;\n  }\n\n}\n\nexport default new studentSevice();","map":{"version":3,"sources":["/mnt/c/Users/taylo/source/react/Legato/sj2legato/savelegato/src/services/studentService.js"],"names":["studentSevice","updateAddGoals","goal","maingoals","mainGoal","myswitch","mainG","currentmains","ob","addmain","push","addgoal","goalhelper","goals","updatemain","updategoal","delmain","splice","i","delgoal","func","compare","compare1","value","length","_id"],"mappings":"AACA,MAAMA,aAAN,CAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,EAAAA,cAAc,CAACC,IAAD,EAAOC,SAAP,EAAkBC,QAAlB,EAA4BC,QAA5B,EAAuC;AACjD;AACA,QAAIC,KAAK,GAAGF,QAAZ;AACA,QAAIG,YAAY,GAAEJ,SAAlB;AACA,QAAIK,EAAE,GAAC;AACHC,MAAAA,OAAO,EAAEF,YAAY,CAACG,IAAb,CAAkBJ,KAAlB,CADN;AAEHK,MAAAA,OAAO,EAAEJ,YAAY,CAAC,KAAKK,UAAL,CAAgBT,SAAhB,EAA2BG,KAA3B,CAAD,CAAZ,CAAgDO,KAAhD,CAAsDH,IAAtD,CAA2DR,IAA3D,CAFN;AAGHY,MAAAA,UAAU,EAAEP,YAAY,CAAC,KAAKK,UAAL,CAAgBT,SAAhB,EAA2BG,KAA3B,CAAD,CAAZ,GAAiDA,KAH1D;AAIHS,MAAAA,UAAU,EAAER,YAAY,CAAC,KAAKK,UAAL,CAAgBT,SAAhB,EAA2BG,KAA3B,CAAD,CAAZ,CAAgDO,KAAhD,CAAsD,KAAKD,UAAL,CAAgBN,KAAK,CAACO,KAAtB,EAA6BX,IAA7B,CAAtD,IAA2FA,IAJpG;AAKHc,MAAAA,OAAO,EAAET,YAAY,CAAC,KAAKK,UAAL,CAAgBT,SAAhB,EAA2BG,KAA3B,CAAD,CAAZ,CAAgDW,MAAhD,CAAuDC,CAAvD,EAA0D,CAA1D,CALN;AAMHC,MAAAA,OAAO,EAAEZ,YAAY,CAAC,KAAKK,UAAL,CAAgBT,SAAhB,EAA2BG,KAA3B,CAAD,CAAZ,CAAgDO,KAAhD,CAAsD,KAAKD,UAAL,CAAgBN,KAAK,CAACO,KAAtB,EAA6BX,IAA7B,CAAtD,EAA0Fe,MAA1F,CAAiGC,CAAjG,EAAoG,CAApG;AANN,KAAP;AAQA,QAAIE,IAAI,GAAEZ,EAAE,CAACH,QAAD,CAAZ;AACA,WAAOE,YAAP;AACC;;AACDK,EAAAA,UAAU,CAACS,OAAD,EAAUC,QAAV,EAAmB;AACzB,QAAIC,KAAJ;;AACA,SAAI,IAAIL,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACG,OAAO,CAACG,MAAvB,EAA+BN,CAAC,EAAhC,EAAmC;AAC/B,UAAGG,OAAO,CAACH,CAAD,CAAP,CAAWO,GAAX,KAAkBH,QAAQ,CAACG,GAA9B,EAAkC;AAC9BF,QAAAA,KAAK,GAAEL,CAAP;AACH,OAFD,MAGI;AACAK,QAAAA,KAAK,GAAE,KAAP;AACH;AACJ;;AACD,WAAOL,CAAP;AAEH;;AArCe;;AA0CpB,eAAe,IAAIlB,aAAJ,EAAf","sourcesContent":["\r\nclass studentSevice {\r\n/**\r\n * \r\n * @param {*} goal \r\n * @param {*} maingoals \r\n * @param {*} mainGoal \r\n * @param {*} add \r\n * @param {*} del \r\n * @returns new updated list of a students goals.\r\n */\r\nupdateAddGoals(goal, maingoals, mainGoal, myswitch ) {\r\n    debugger\r\n    let mainG = mainGoal;\r\n    let currentmains= maingoals;\r\n    let ob={\r\n        addmain: currentmains.push(mainG),\r\n        addgoal: currentmains[this.goalhelper(maingoals, mainG)].goals.push(goal),\r\n        updatemain: currentmains[this.goalhelper(maingoals, mainG)]= mainG,\r\n        updategoal: currentmains[this.goalhelper(maingoals, mainG)].goals[this.goalhelper(mainG.goals, goal)]= goal,\r\n        delmain: currentmains[this.goalhelper(maingoals, mainG)].splice(i, 1),\r\n        delgoal: currentmains[this.goalhelper(maingoals, mainG)].goals[this.goalhelper(mainG.goals, goal)].splice(i, 1)\r\n    }\r\n    let func= ob[myswitch]\r\n    return currentmains\r\n    }\r\n    goalhelper(compare, compare1){\r\n        let value;\r\n        for(let i=0; i<compare.length; i++){\r\n            if(compare[i]._id=== compare1._id){\r\n                value= i\r\n            }\r\n            else{\r\n                value= false\r\n            }\r\n        }\r\n        return i\r\n\r\n    }\r\n\r\n \r\n}\r\n\r\nexport default new studentSevice();"]},"metadata":{},"sourceType":"module"}