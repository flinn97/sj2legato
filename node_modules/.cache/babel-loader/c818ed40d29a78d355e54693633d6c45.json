{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/taylo/source/react/Legato/sj2legato/savelegato/src/components/student_routes.js\";\nimport React, { Component } from \"react\";\nimport AuthService from \"../services/auth.service\";\nimport Route from \"./routeFunc\";\nimport StudentArray from \"./student_array.js\";\nimport axios from \"axios\";\nimport Newuser from \"./newuser.js\";\nimport Splashscreen from \"./splashscreen.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\naxios.defaults.xsrfCookieName = 'csrftoken';\naxios.defaults.xsrfHeaderName = 'X-CSRFToken'; //works as a routing function for the student. Some tricky code here.\n\nexport default class Student_routes extends Component {\n  //set state needed for backend usage.\n  constructor(props) {\n    super(props);\n\n    this.handleChange = event => {\n      const {\n        name,\n        value\n      } = event.target;\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.handleLogin = e => {\n      if (this.state.password2) {\n        if (this.state.password1 !== this.state.password2) {\n          this.setState({\n            message: \"Make sure passwords match\",\n            messag: true\n          });\n        } else {\n          this.setState({\n            profile: true,\n            needPassword: false,\n            pastFirstTime: true,\n            logoutnewuser: true\n          });\n          const account = [];\n\n          for (let i = 0; i < this.state.currentUser.account.length; i++) {\n            account.push(this.state.currentUser.account[i]._id);\n          }\n\n          AuthService.setPastFirstTime(this.state.currentUser.id, account, this.state.password1);\n          AuthService.login(this.state.currentUser.email, this.state.password1);\n        }\n      } else {\n        this.setState({\n          message: \"Make sure passwords match\",\n          messag: true\n        });\n      }\n    };\n\n    this.profile = e => {\n      this.setState({\n        profile: true\n      });\n    };\n\n    this.goals = e => {\n      this.setState({\n        profile: false\n      });\n    };\n\n    this.handleLogin = this.handleLogin.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.componentsMounting = this.componentsMounting.bind(this);\n    this.profile = this.profile.bind(this);\n    this.goals = this.goals.bind(this);\n    this.handlePage = this.handlePage.bind(this);\n    this.changetoRealTime = this.changetoRealTime.bind(this);\n    this.show = this.show.bind(this);\n    this.Splashscreen = this.Splashscreen.bind(this);\n    this.state = {\n      currentUser: AuthService.getCurrentUser(),\n      password1: \"\",\n      password2: \"\",\n      profile: false,\n      needPassword: true,\n      pastFirstTime: AuthService.getCurrentUser(true).pastFirstTime,\n      currentPage: \"\",\n      default: [],\n      currentUserChange: undefined,\n      first: \"\",\n      currentStudents: [],\n      show: true,\n      splashscreen: false,\n      splashed: 0,\n      logoutnewuser: false\n    };\n  }\n\n  async Splashscreen() {\n    this.setState({\n      splashscreen: !this.state.splashscreen\n    });\n\n    const delay = ms => new Promise(res => setTimeout(res, ms));\n\n    await delay(650);\n    window.location.reload();\n  } //logged in for a student this mounting step will help pick the first student in the account as the landing page.\n\n\n  changetoRealTime(firstname, usr) {\n    console.log(usr);\n    this.setState({\n      currentUserChange: usr,\n      first: firstname\n    });\n  }\n\n  show() {\n    this.setState({\n      show: !this.state.show\n    });\n  }\n\n  async componentDidMount() {\n    if (this.state.currentUser) {\n      if (this.state.currentUser.role !== \"student\") {\n        this.props.history.push(\"/\");\n        window.location.reload();\n      } else {\n        if (this.state.currentUser) {\n          if (this.props.history.location) {\n            if (this.props.history.location.state) {\n              if (this.props.history.location.state.current) {\n                this.setState({\n                  pastFirstTime: this.props.history.location.state.current.pastFirstTime\n                });\n              } else {\n                this.setState({\n                  pastFirstTime: this.state.currentUser.pastFirstTime\n                });\n              }\n            } else {\n              this.setState({\n                pastFirstTime: this.state.currentUser.pastFirstTime\n              });\n            }\n          }\n        }\n\n        AuthService.getAccounts(this.state.currentUser.id).then(response => {\n          this.setState({\n            currentStudents: response.data\n          });\n\n          for (let i = 0; i < this.state.currentStudents.length; i++) {\n            if (this.state.currentStudents[i].active === true) {\n              this.setState({\n                currentPage: this.state.currentStudents[i]\n              });\n            }\n          }\n        });\n        this.componentsMounting();\n      }\n    } else {\n      this.props.history.push(\"/login\");\n      window.location.reload();\n    }\n  } //may or may not use this one.\n\n\n  componentsMounting() {\n    let id = this.state.currentUser.id; //  const API_URL = \"http://localhost:8080/api/auth/\";\n\n    const API_URL = \"http://try.flinnapps.com/api/auth/\";\n    axios.post(API_URL + \"getAccount\", {\n      id\n    }).then(response => {\n      console.log(response.data);\n\n      if (response.data.account.pastFirstTime) {\n        this.setState({\n          pastFirstTime: response.data.account.pastFirstTime\n        });\n      }\n    });\n    /*\r\n    if (this.state.currentUser.pastFirstTime) {\r\n          return true;\r\n    }\r\n    else {\r\n          return false;\r\n    }*/\n  } //helps handle all state changes.\n\n\n  //will be used with buttons later. It's used when there are multiple students on one account.\n  async handlePage(student) {\n    AuthService.changeactivestudent(this.state.currentPage._id, student._id).then(response => {\n      window.location.reload();\n    }); //await this.wait(500);\n\n    this.Splashscreen(); //window.location.reload();\n  } //this is used when the student logs in for the first time.\n\n\n  //tricky render actually. Essentially if its the first time that the student has logged in they need to put in a new password. Otherwise the normal with show up.\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fill1\",\n      children: [this.state.splashscreen && /*#__PURE__*/_jsxDEV(Splashscreen, {\n        closesplash: this.Splashscreen\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 46\n      }, this), this.state.currentUser ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"z2\",\n        children: this.state.logoutnewuser ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\" \", /*#__PURE__*/_jsxDEV(Newuser, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 58\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 52\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: this.state.pastFirstTime ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"fill1\",\n            children: [this.state.show ? /*#__PURE__*/_jsxDEV(StudentArray, {\n              handlePage: this.handlePage,\n              props: this.state.currentUser,\n              currentUserChange: this.state.currentUserChange,\n              first: this.state.first,\n              show: this.state.show\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 268,\n              columnNumber: 83\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 269,\n              columnNumber: 4\n            }, this), /*#__PURE__*/_jsxDEV(Route, {\n              props: this.state,\n              handleChange: this.handleChange,\n              handleLogin: this.handleLogin,\n              currentUserChange: this.changetoRealTime,\n              show: this.show\n            }, this.state.currentPage, false, {\n              fileName: _jsxFileName,\n              lineNumber: 271,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 29\n          }, this) : /*#__PURE__*/_jsxDEV(Route, {\n            props: this.state,\n            handleChange: this.handleChange,\n            handleLogin: this.handleLogin\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 78\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/mnt/c/Users/taylo/source/react/Legato/sj2legato/savelegato/src/components/student_routes.js"],"names":["React","Component","AuthService","Route","StudentArray","axios","Newuser","Splashscreen","defaults","xsrfCookieName","xsrfHeaderName","Student_routes","constructor","props","handleChange","event","name","value","target","setState","handleLogin","e","state","password2","password1","message","messag","profile","needPassword","pastFirstTime","logoutnewuser","account","i","currentUser","length","push","_id","setPastFirstTime","id","login","email","goals","bind","componentsMounting","handlePage","changetoRealTime","show","getCurrentUser","currentPage","default","currentUserChange","undefined","first","currentStudents","splashscreen","splashed","delay","ms","Promise","res","setTimeout","window","location","reload","firstname","usr","console","log","componentDidMount","role","history","current","getAccounts","then","response","data","active","API_URL","post","student","changeactivestudent","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport AuthService from \"../services/auth.service\";\r\nimport Route from \"./routeFunc\";\r\nimport StudentArray from \"./student_array.js\";\r\nimport axios from \"axios\";\r\nimport Newuser from \"./newuser.js\"\r\nimport Splashscreen  from \"./splashscreen.js\";\r\naxios.defaults.xsrfCookieName = 'csrftoken';\r\naxios.defaults.xsrfHeaderName = 'X-CSRFToken';\r\n\r\n\r\n//works as a routing function for the student. Some tricky code here.\r\nexport default class Student_routes extends Component {\r\n    //set state needed for backend usage.\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleLogin = this.handleLogin.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.componentsMounting = this.componentsMounting.bind(this);\r\n        this.profile = this.profile.bind(this);\r\n        this.goals = this.goals.bind(this);\r\n        this.handlePage = this.handlePage.bind(this);\r\n        this.changetoRealTime = this.changetoRealTime.bind(this);\r\n        this.show = this.show.bind(this);\r\n        this.Splashscreen = this.Splashscreen.bind(this);\r\n\r\n        \r\n\r\n        this.state = {\r\n            currentUser: AuthService.getCurrentUser(),\r\n            password1: \"\",\r\n            password2: \"\",\r\n            profile: false,\r\n            needPassword: true,\r\n            pastFirstTime: AuthService.getCurrentUser(true).pastFirstTime,\r\n            currentPage: \"\",\r\n            default: [],\r\n            currentUserChange: undefined,\r\n            first: \"\",\r\n            currentStudents: [],\r\n            show: true,\r\n            splashscreen:false,\r\n            splashed: 0,\r\n            logoutnewuser: false,\r\n\r\n            \r\n        };\r\n       \r\n    }\r\n    async Splashscreen(){\r\n        this.setState({\r\n            splashscreen:!this.state.splashscreen\r\n        })\r\n        \r\n        const delay = ms => new Promise(res => setTimeout(res, ms));\r\n        await delay(650)\r\n            window.location.reload();\r\n\r\n        \r\n\r\n    }\r\n    //logged in for a student this mounting step will help pick the first student in the account as the landing page.\r\n    changetoRealTime(firstname, usr) {\r\n        console.log(usr);\r\n        this.setState({\r\n            currentUserChange: usr,\r\n            first: firstname,\r\n        })\r\n    }\r\n    show(){\r\n        this.setState({\r\n            show: !this.state.show\r\n        })\r\n    }\r\n\r\n    async componentDidMount() {\r\n        if (this.state.currentUser) {\r\n\r\n\r\n            if (this.state.currentUser.role !== \"student\") {\r\n                this.props.history.push(\"/\");\r\n                window.location.reload();\r\n            }\r\n            else {\r\n                \r\n                if (this.state.currentUser) {\r\n                    if (this.props.history.location) {\r\n                        if (this.props.history.location.state) {\r\n                            if (this.props.history.location.state.current) {\r\n                                this.setState({\r\n                                    pastFirstTime: this.props.history.location.state.current.pastFirstTime\r\n                                })\r\n                            }\r\n                            else {\r\n                                this.setState({\r\n                                    pastFirstTime: this.state.currentUser.pastFirstTime\r\n                                })\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.setState({\r\n                                pastFirstTime: this.state.currentUser.pastFirstTime\r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n\r\n\r\n\r\n\r\n                AuthService.getAccounts(this.state.currentUser.id).then(response => {\r\n                    this.setState({\r\n                        currentStudents: response.data,\r\n                    });\r\n\r\n                    for (let i = 0; i < this.state.currentStudents.length; i++) {\r\n\r\n                        if (this.state.currentStudents[i].active === true) {\r\n                            this.setState({\r\n                                currentPage: this.state.currentStudents[i],\r\n                            })\r\n                        }\r\n                    }\r\n\r\n                });\r\n\r\n\r\n\r\n                this.componentsMounting();\r\n\r\n            }\r\n\r\n        }\r\n        else {\r\n            this.props.history.push(\"/login\");\r\n            window.location.reload();\r\n        }\r\n\r\n    }\r\n    //may or may not use this one.\r\n     componentsMounting() {\r\n        \r\n        let id = this.state.currentUser.id\r\n       //  const API_URL = \"http://localhost:8080/api/auth/\";\r\n         \r\n         const API_URL = \"http://try.flinnapps.com/api/auth/\"\r\n\r\n\r\n        \r\n         \r\n         axios.post(API_URL + \"getAccount\", {\r\n            id,\r\n\r\n        }).then(response => {\r\n            console.log(response.data);\r\n            if (response.data.account.pastFirstTime) {\r\n                this.setState({\r\n                    pastFirstTime: response.data.account.pastFirstTime,\r\n                })\r\n            }\r\n            \r\n        });\r\n        /*\r\n        if (this.state.currentUser.pastFirstTime) {\r\n\r\n            return true;\r\n        }\r\n        else {\r\n\r\n            return false;\r\n        }*/\r\n    }\r\n       \r\n\r\n    //helps handle all state changes.\r\n    handleChange = (event) => {\r\n        const { name, value } = event.target\r\n\r\n        this.setState({\r\n            [name]: value,\r\n        })\r\n    }\r\n    //will be used with buttons later. It's used when there are multiple students on one account.\r\n    async handlePage (student)  {\r\n         \r\n        AuthService.changeactivestudent(this.state.currentPage._id, student._id).then(response => {\r\n             window.location.reload();\r\n\r\n         })\r\n        \r\n         //await this.wait(500);\r\n        this.Splashscreen();\r\n        //window.location.reload();\r\n\r\n\r\n        \r\n        \r\n       \r\n    }\r\n    \r\n    \r\n\r\n    //this is used when the student logs in for the first time.\r\n    handleLogin = (e) => {\r\n\r\n        if (this.state.password2) {\r\n            if (this.state.password1 !== this.state.password2) {\r\n                this.setState({\r\n                    message: \"Make sure passwords match\",\r\n                    messag: true,\r\n                })\r\n            }\r\n            else {\r\n                this.setState({\r\n                    profile: true,\r\n                    needPassword: false,\r\n                    pastFirstTime: true,\r\n                    logoutnewuser: true,\r\n                });\r\n                const account = [];\r\n                for (let i = 0; i < this.state.currentUser.account.length; i++) {\r\n\r\n                    account.push(this.state.currentUser.account[i]._id);\r\n\r\n                }\r\n                 AuthService.setPastFirstTime(this.state.currentUser.id, account, this.state.password1);\r\n                AuthService.login(this.state.currentUser.email, this.state.password1);\r\n            }\r\n\r\n        }\r\n        else {\r\n            this.setState({\r\n                message: \"Make sure passwords match\",\r\n                messag: true,\r\n            })\r\n        }\r\n        \r\n        \r\n    }\r\n\r\n\r\n\r\n    //if profile is picked then it shows the profile page.\r\n    profile=(e) => {\r\n        this.setState({\r\n            profile: true,\r\n\r\n        });\r\n    }\r\n    //if goals are picked then it shows the goals page.\r\n    goals = (e) => {\r\n        this.setState({\r\n            profile: false,\r\n\r\n        });\r\n    }\r\n    //tricky render actually. Essentially if its the first time that the student has logged in they need to put in a new password. Otherwise the normal with show up.\r\n    render() {\r\n        \r\n        return (\r\n            <div className=\"fill1\">\r\n                {this.state.splashscreen && (<Splashscreen closesplash={this.Splashscreen}/>)}\r\n                {this.state.currentUser ? (\r\n                    <div className=\"z2\">\r\n                        {this.state.logoutnewuser?(<div> <Newuser /></div>):(<div>\r\n                        {this.state.pastFirstTime ? (\r\n                            <div className=\"fill1\">\r\n                                {this.state.show?(                                <StudentArray handlePage={this.handlePage} props={this.state.currentUser} currentUserChange={this.state.currentUserChange} first={this.state.first} show={this.state.show}/>\r\n):(<div></div>)}\r\n\r\n                                <Route key={this.state.currentPage} props={this.state} handleChange={this.handleChange} handleLogin={this.handleLogin} currentUserChange={this.changetoRealTime} show={this.show}/>\r\n                            </div>\r\n                        ) : (\r\n\r\n                                <Route props={this.state} handleChange={this.handleChange} handleLogin={this.handleLogin} />\r\n                            )}\r\n                            </div>)}\r\n                    </div>\r\n                ): (<div></div>)}\r\n            \r\n                </div>\r\n        );\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}