{"ast":null,"code":"class studentSevice {\n  /**\r\n   * \r\n   * @param {*} goal \r\n   * @param {*} maingoals \r\n   * @param {*} mainGoal \r\n   * @param {*} add \r\n   * @param {*} del \r\n   * @returns new updated list of a students goals.\r\n   */\n  updateAddGoals(goal, maingoals, mainGoal, myswitch, archive) {\n    let mainG = mainGoal;\n    let currentmains = maingoals;\n    let myarchive = archive;\n    let i = this.compare(maingoals, mainG);\n    let j = this.compare(mainG.mainGoal.goals, goal ? goal : {\n      id: 1\n    }, true);\n\n    switch (myswitch) {\n      case \"addmain\":\n        currentmains.push(mainG);\n        break;\n\n      case \"addgoal\":\n        currentmains[i].mainGoal.goals.push(goal);\n        break;\n\n      case \"delmain\":\n        currentmains.splice(i, 1);\n        break;\n\n      case \"delgoal\":\n        currentmains[i].mainGoal.goals.splice(j, 1);\n        break;\n\n      case \"updatemain\":\n        currentmains[i] = mainG;\n        break;\n\n      case \"updategoal\":\n        currentmains[i].mainGoal.goals[j] = goal;\n        break;\n\n      case \"archivegoal\":\n        myarchive.push(mainG);\n        currentmains.splice(i, 1);\n        break;\n\n      case \"delarchivegoal\":\n        let a = this.compare(myarchive, mainG);\n        myarchive.splice(a, 1);\n        break;\n    }\n\n    return myswitch === \"archivegoal\" || myswitch === \"delarchivegoal\" ? {\n      currentmains: currentmains,\n      archive: myarchive\n    } : currentmains;\n  }\n  /**\r\n   * \r\n   * @param {*} homework \r\n   * @param {*} homeworks \r\n   * @param {*} myswitch \r\n   * @returns updated homework array\r\n   */\n\n\n  updateAdddelhomework(homework, homeworks, myswitch) {\n    let myhomework = homework;\n    let myhomeworks = homeworks;\n    let i = this.compare(myhomeworks, myhomework, true);\n\n    switch (myswitch) {\n      case \"addhomework\":\n        myhomeworks.push(myhomework);\n        break;\n\n      case \"delhomework\":\n        myhomeworks.splice(i, 1);\n        break;\n\n      case \"updatehomework\":\n        myhomeworks[i] = homework;\n        break;\n    }\n\n    return myhomeworks;\n  }\n\n  updateAddDelnotes(note, notes, myswitch) {\n    let mynote = note;\n    let mynotes = notes;\n    let i = this.compare(mynotes, mynote, true);\n\n    switch (myswitch) {\n      case \"addnote\":\n        mynotes.push(mynote);\n        break;\n\n      case \"delnote\":\n        mynotes.splice(i, 1);\n        break;\n\n      case \"updatenote\":\n        mynotes[i] = mynote;\n        break;\n    }\n\n    return mynotes;\n  }\n  /**\r\n   * \r\n   * @param {*} compare \r\n   * @param {*} compare1 \r\n   * @param {*} condition \r\n   * @returns i for the compaired two values\r\n   */\n\n\n  compare(compare, compare1, condition) {\n    let value;\n\n    for (let i = 0; i < compare.length; i++) {\n      if (!condition) {\n        if (compare1._id ? compare[i]._id === compare1._id : compare[i].mainGoal.id === compare1.mainGoal.id) {\n          value = i;\n          break;\n        }\n      } else if (condition) {\n        if (compare1._id ? compare[i]._id === compare1._id : compare[i].id === compare1.id) {\n          value = i;\n          break;\n        }\n      } else {\n        value = false;\n      }\n    }\n\n    return value;\n  }\n\n}\n\nexport default new studentSevice();","map":{"version":3,"sources":["/mnt/c/Users/taylo/source/react/Legato/sj2legato/savelegato/src/services/studentService.js"],"names":["studentSevice","updateAddGoals","goal","maingoals","mainGoal","myswitch","archive","mainG","currentmains","myarchive","i","compare","j","goals","id","push","splice","a","updateAdddelhomework","homework","homeworks","myhomework","myhomeworks","updateAddDelnotes","note","notes","mynote","mynotes","compare1","condition","value","length","_id"],"mappings":"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","sourcesContent":["\r\nclass studentSevice {\r\n/**\r\n * \r\n * @param {*} goal \r\n * @param {*} maingoals \r\n * @param {*} mainGoal \r\n * @param {*} add \r\n * @param {*} del \r\n * @returns new updated list of a students goals.\r\n */\r\nupdateAddGoals(goal, maingoals, mainGoal, myswitch, archive ) {\r\n    \r\n    let mainG = mainGoal;\r\n    let currentmains= maingoals;\r\n    let myarchive=archive;\r\n    let i=this.compare(maingoals, mainG)\r\n    let j= this.compare(mainG.mainGoal.goals, goal? goal: {id:1}, true)\r\n    switch(myswitch){\r\n        case \"addmain\":\r\n            currentmains.push(mainG);\r\n            break;\r\n        case \"addgoal\":\r\n            currentmains[i].mainGoal.goals.push(goal);\r\n            break;\r\n        case \"delmain\":\r\n            currentmains.splice(i, 1);\r\n            break;\r\n        case \"delgoal\":\r\n            currentmains[i].mainGoal.goals.splice(j, 1);\r\n            break;\r\n        case \"updatemain\":\r\n            currentmains[i]= mainG;\r\n            break;\r\n        case \"updategoal\":\r\n            currentmains[i].mainGoal.goals[j]= goal\r\n            break;\r\n        case \"archivegoal\":\r\n            myarchive.push(mainG);\r\n            currentmains.splice(i, 1);\r\n            break;\r\n        case \"delarchivegoal\":\r\n            let a=this.compare(myarchive, mainG)\r\n            myarchive.splice(a, 1);\r\n            break;\r\n\r\n    }\r\n    return myswitch===\"archivegoal\"||myswitch===\"delarchivegoal\"? {currentmains:currentmains, archive: myarchive} :currentmains;\r\n    }\r\n    /**\r\n     * \r\n     * @param {*} homework \r\n     * @param {*} homeworks \r\n     * @param {*} myswitch \r\n     * @returns updated homework array\r\n     */\r\n    updateAdddelhomework(homework, homeworks, myswitch ) {\r\n        \r\n        let myhomework = homework;\r\n        let myhomeworks = homeworks;\r\n        let i=this.compare(myhomeworks, myhomework, true)\r\n        switch(myswitch){\r\n            case \"addhomework\":\r\n                myhomeworks.push(myhomework);\r\n                break;\r\n            case \"delhomework\":\r\n                myhomeworks.splice(i, 1);\r\n                break;\r\n            case \"updatehomework\":\r\n                myhomeworks[i]= homework;\r\n                break;\r\n        }\r\n        return myhomeworks\r\n    }\r\n    updateAddDelnotes(note, notes, myswitch, ){\r\n        \r\n        let mynote = note;\r\n        let mynotes = notes;\r\n        let i=this.compare(mynotes, mynote, true)\r\n        switch(myswitch){\r\n            case \"addnote\":\r\n                mynotes.push(mynote);\r\n                break;\r\n            case \"delnote\":\r\n                mynotes.splice(i, 1);\r\n                break;\r\n            case \"updatenote\":\r\n                mynotes[i]= mynote;\r\n                break;\r\n        }\r\n        return mynotes\r\n    }\r\n    /**\r\n     * \r\n     * @param {*} compare \r\n     * @param {*} compare1 \r\n     * @param {*} condition \r\n     * @returns i for the compaired two values\r\n     */\r\n    compare(compare, compare1, condition){\r\n        \r\n        let value;\r\n        for(let i=0; i<compare.length; i++){\r\n            if(!condition){\r\n            if((compare1._id? compare[i]._id=== compare1._id : compare[i].mainGoal.id=== compare1.mainGoal.id) ){\r\n                    value= i\r\n                    break;\r\n            }\r\n            }\r\n            else if(condition){\r\n                if(compare1._id? compare[i]._id=== compare1._id : compare[i].id=== compare1.id){\r\n                value= i\r\n                break;\r\n                }\r\n            }\r\n            else{\r\n                value= false\r\n            }\r\n        }\r\n        return value\r\n    }\r\n\r\n \r\n}\r\n\r\nexport default new studentSevice();"]},"metadata":{},"sourceType":"module"}