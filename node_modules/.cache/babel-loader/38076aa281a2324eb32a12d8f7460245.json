{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/taylo/source/react/Legato/sj2legato/savelegato/src/components/percent.js\";\nimport React, { Component } from \"react\";\nimport \"./progress_circle.css\"; //not much here but functionality will be added for the goals.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Percent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      completedGoals: \"\",\n      incompletGoals: \"\",\n      percent: \"\",\n      totalGoals: this.props.goals.length + 1\n    };\n  }\n\n  async componentDidMount() {\n    let completedGoals = 0;\n    let goals = 0;\n\n    for (let i = 0; i < this.props.goals.length; i++) {\n      if (this.props.goals[i].complete) {\n        completedGoals += 1;\n      } else {\n        goals += 1;\n      }\n    }\n\n    if (this.props.main) {\n      if (this.props.main.complete) {\n        completedGoals += 1;\n      } else {\n        goals += 1;\n      }\n    }\n\n    await this.setState({\n      completedGoals: completedGoals,\n      incompletGoals: goals\n    });\n    console.log(this.state.totalGoals);\n    let calc = 100 / this.state.totalGoals;\n    let percentage = calc * this.state.completedGoals;\n    let percent = percentage.toString();\n    let perc = \"\";\n\n    if (percent.length > 4) {\n      for (let i = 0; i < 4; i++) {\n        perc += percent[i];\n      }\n    } else {\n      perc = percent;\n    }\n\n    this.setState({\n      percent: perc\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: this.props.one ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [this.state.percent, \"% Goals Completed\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 34\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [this.state.percent, \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 85\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/mnt/c/Users/taylo/source/react/Legato/sj2legato/savelegato/src/components/percent.js"],"names":["React","Component","Percent","constructor","props","state","completedGoals","incompletGoals","percent","totalGoals","goals","length","componentDidMount","i","complete","main","setState","console","log","calc","percentage","toString","perc","render","one"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,uBAAP,C,CACA;;;AACA,eAAe,MAAMC,OAAN,SAAsBD,SAAtB,CAAgC;AAC3CE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACTC,MAAAA,cAAc,EAAE,EADP;AAETC,MAAAA,cAAc,EAAE,EAFP;AAGTC,MAAAA,OAAO,EAAE,EAHA;AAITC,MAAAA,UAAU,EAAE,KAAKL,KAAL,CAAWM,KAAX,CAAiBC,MAAjB,GAA0B;AAJ7B,KAAb;AAMH;;AACsB,QAAjBC,iBAAiB,GAAG;AACtB,QAAIN,cAAc,GAAG,CAArB;AACA,QAAII,KAAK,GAAG,CAAZ;;AAEA,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKT,KAAL,CAAWM,KAAX,CAAiBC,MAArC,EAA6CE,CAAC,EAA9C,EAAkD;AAE9C,UAAI,KAAKT,KAAL,CAAWM,KAAX,CAAiBG,CAAjB,EAAoBC,QAAxB,EAAkC;AAC9BR,QAAAA,cAAc,IAAI,CAAlB;AACH,OAFD,MAGK;AACDI,QAAAA,KAAK,IAAI,CAAT;AACH;AACJ;;AACD,QAAI,KAAKN,KAAL,CAAWW,IAAf,EAAqB;AACjB,UAAI,KAAKX,KAAL,CAAWW,IAAX,CAAgBD,QAApB,EAA8B;AAC1BR,QAAAA,cAAc,IAAI,CAAlB;AACH,OAFD,MAGK;AACDI,QAAAA,KAAK,IAAI,CAAT;AACH;AACJ;;AAED,UAAM,KAAKM,QAAL,CAAc;AAChBV,MAAAA,cAAc,EAAEA,cADA;AAEhBC,MAAAA,cAAc,EAAEG;AAFA,KAAd,CAAN;AAKAO,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKb,KAAL,CAAWI,UAAvB;AACA,QAAIU,IAAI,GAAG,MAAM,KAAKd,KAAL,CAAWI,UAA5B;AACA,QAAIW,UAAU,GAAGD,IAAI,GAAG,KAAKd,KAAL,CAAWC,cAAnC;AAGA,QAAIE,OAAO,GAAGY,UAAU,CAACC,QAAX,EAAd;AACA,QAAIC,IAAI,GAAG,EAAX;;AACA,QAAId,OAAO,CAACG,MAAR,GAAiB,CAArB,EAAwB;AAEpB,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxBS,QAAAA,IAAI,IAAId,OAAO,CAACK,CAAD,CAAf;AACH;AACJ,KALD,MAMK;AACDS,MAAAA,IAAI,GAAGd,OAAP;AACH;;AAED,SAAKQ,QAAL,CAAc;AACVR,MAAAA,OAAO,EAAEc;AADC,KAAd;AAKH;;AACDC,EAAAA,MAAM,GAAG;AACL,wBAEI;AAAA,gBACK,KAAKnB,KAAL,CAAWoB,GAAX,gBAAgB;AAAA,mBAAM,KAAKnB,KAAL,CAAWG,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA,cAAhB,gBAAmE;AAAA,mBAAM,KAAKH,KAAL,CAAWG,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AADxE;AAAA;AAAA;AAAA;AAAA,YAFJ;AASH;;AAvE0C","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./progress_circle.css\";\r\n//not much here but functionality will be added for the goals.\r\nexport default class Percent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            completedGoals: \"\",\r\n            incompletGoals: \"\",\r\n            percent: \"\",\r\n            totalGoals: this.props.goals.length + 1,\r\n        };\r\n    }\r\n    async componentDidMount() {\r\n        let completedGoals = 0;\r\n        let goals = 0;\r\n\r\n        for (let i = 0; i < this.props.goals.length; i++) {\r\n\r\n            if (this.props.goals[i].complete) {\r\n                completedGoals += 1;\r\n            }\r\n            else {\r\n                goals += 1;\r\n            }\r\n        }\r\n        if (this.props.main) {\r\n            if (this.props.main.complete) {\r\n                completedGoals += 1;\r\n            }\r\n            else {\r\n                goals += 1;\r\n            }\r\n        }\r\n\r\n        await this.setState({\r\n            completedGoals: completedGoals,\r\n            incompletGoals: goals,\r\n        })\r\n\r\n        console.log(this.state.totalGoals);\r\n        let calc = 100 / this.state.totalGoals;\r\n        let percentage = calc * this.state.completedGoals;\r\n       \r\n\r\n        let percent = percentage.toString();\r\n        let perc = \"\";\r\n        if (percent.length > 4) {\r\n\r\n            for (let i = 0; i < 4; i++) {\r\n                perc += percent[i];\r\n            }\r\n        }\r\n        else {\r\n            perc = percent;\r\n        }\r\n\r\n        this.setState({\r\n            percent: perc,\r\n\r\n\r\n        });\r\n    }\r\n    render() {\r\n        return (\r\n            \r\n            <div>\r\n                {this.props.one?(<div>{this.state.percent}% Goals Completed</div>):(<div>{this.state.percent}%</div>)}\r\n                \r\n                \r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}