{"ast":null,"code":"class studentSevice {\n  /**\r\n   * \r\n   * @param {*} goal \r\n   * @param {*} maingoals \r\n   * @param {*} mainGoal \r\n   * @param {*} add \r\n   * @param {*} del \r\n   * @returns new updated list of a students goals.\r\n   */\n  updateAddGoals(goal, maingoals, mainGoal, myswitch) {\n    debugger;\n    let mainG = mainGoal;\n    let currentmains = maingoals;\n\n    switch (myswitch) {\n      case \"addmain\":\n        currentmains.push(mainG);\n        break;\n\n      case \"addgoal\":\n        let test = currentmains[this.goalhelper(maingoals, mainG)];\n        currentmains[this.goalhelper(maingoals, mainG)].goals.push(goal);\n        break;\n\n      case \"delmain\":\n        currentmains[this.goalhelper(maingoals, mainG)].splice(this.goalhelper(maingoals, mainG), 1);\n        break;\n\n      case \"delgoal\":\n        currentmains[this.goalhelper(maingoals, mainG)].goals[this.goalhelper(mainG.goals, goal)].splice(this.goalhelper(mainG.goals, goal), 1);\n        break;\n\n      case \"updatemain\":\n        currentmains[this.goalhelper(maingoals, mainG)] = mainG;\n        break;\n\n      case \"updategoal\":\n        currentmains[this.goalhelper(maingoals, mainG)].goals[this.goalhelper(mainG.goals, goal)] = goal;\n        break;\n    }\n\n    return currentmains;\n  }\n\n  goalhelper(compare, compare1) {\n    debugger;\n    let value;\n\n    for (let i = 0; i < compare.length; i++) {\n      if (compare[i]._id === compare1._id) {\n        value = i;\n        break;\n      } else {\n        value = false;\n      }\n    }\n\n    return value;\n  }\n\n}\n\nexport default new studentSevice();","map":{"version":3,"sources":["/mnt/c/Users/taylo/source/react/Legato/sj2legato/savelegato/src/services/studentService.js"],"names":["studentSevice","updateAddGoals","goal","maingoals","mainGoal","myswitch","mainG","currentmains","push","test","goalhelper","goals","splice","compare","compare1","value","i","length","_id"],"mappings":"AACA,MAAMA,aAAN,CAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,EAAAA,cAAc,CAACC,IAAD,EAAOC,SAAP,EAAkBC,QAAlB,EAA4BC,QAA5B,EAAuC;AACjD;AACA,QAAIC,KAAK,GAAGF,QAAZ;AACA,QAAIG,YAAY,GAAEJ,SAAlB;;AACA,YAAOE,QAAP;AACI,WAAK,SAAL;AACIE,QAAAA,YAAY,CAACC,IAAb,CAAkBF,KAAlB;AACA;;AACJ,WAAK,SAAL;AACI,YAAIG,IAAI,GAAEF,YAAY,CAAC,KAAKG,UAAL,CAAgBP,SAAhB,EAA2BG,KAA3B,CAAD,CAAtB;AACAC,QAAAA,YAAY,CAAC,KAAKG,UAAL,CAAgBP,SAAhB,EAA2BG,KAA3B,CAAD,CAAZ,CAAgDK,KAAhD,CAAsDH,IAAtD,CAA2DN,IAA3D;AACA;;AACJ,WAAK,SAAL;AACIK,QAAAA,YAAY,CAAC,KAAKG,UAAL,CAAgBP,SAAhB,EAA2BG,KAA3B,CAAD,CAAZ,CAAgDM,MAAhD,CAAuD,KAAKF,UAAL,CAAgBP,SAAhB,EAA2BG,KAA3B,CAAvD,EAA0F,CAA1F;AACA;;AACJ,WAAK,SAAL;AACIC,QAAAA,YAAY,CAAC,KAAKG,UAAL,CAAgBP,SAAhB,EAA2BG,KAA3B,CAAD,CAAZ,CAAgDK,KAAhD,CAAsD,KAAKD,UAAL,CAAgBJ,KAAK,CAACK,KAAtB,EAA6BT,IAA7B,CAAtD,EAA0FU,MAA1F,CAAiG,KAAKF,UAAL,CAAgBJ,KAAK,CAACK,KAAtB,EAA6BT,IAA7B,CAAjG,EAAqI,CAArI;AACA;;AACJ,WAAK,YAAL;AACIK,QAAAA,YAAY,CAAC,KAAKG,UAAL,CAAgBP,SAAhB,EAA2BG,KAA3B,CAAD,CAAZ,GAAiDA,KAAjD;AACA;;AACJ,WAAK,YAAL;AACIC,QAAAA,YAAY,CAAC,KAAKG,UAAL,CAAgBP,SAAhB,EAA2BG,KAA3B,CAAD,CAAZ,CAAgDK,KAAhD,CAAsD,KAAKD,UAAL,CAAgBJ,KAAK,CAACK,KAAtB,EAA6BT,IAA7B,CAAtD,IAA2FA,IAA3F;AACA;AAnBR;;AAsBA,WAAOK,YAAP;AACC;;AACDG,EAAAA,UAAU,CAACG,OAAD,EAAUC,QAAV,EAAmB;AACzB;AACA,QAAIC,KAAJ;;AACA,SAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACH,OAAO,CAACI,MAAvB,EAA+BD,CAAC,EAAhC,EAAmC;AAC/B,UAAGH,OAAO,CAACG,CAAD,CAAP,CAAWE,GAAX,KAAkBJ,QAAQ,CAACI,GAA9B,EAAkC;AAC9BH,QAAAA,KAAK,GAAEC,CAAP;AACA;AACH,OAHD,MAII;AACAD,QAAAA,KAAK,GAAE,KAAP;AACH;AACJ;;AACD,WAAOA,KAAP;AAEH;;AApDe;;AAyDpB,eAAe,IAAIf,aAAJ,EAAf","sourcesContent":["\r\nclass studentSevice {\r\n/**\r\n * \r\n * @param {*} goal \r\n * @param {*} maingoals \r\n * @param {*} mainGoal \r\n * @param {*} add \r\n * @param {*} del \r\n * @returns new updated list of a students goals.\r\n */\r\nupdateAddGoals(goal, maingoals, mainGoal, myswitch ) {\r\n    debugger\r\n    let mainG = mainGoal;\r\n    let currentmains= maingoals;\r\n    switch(myswitch){\r\n        case \"addmain\":\r\n            currentmains.push(mainG);\r\n            break;\r\n        case \"addgoal\":\r\n            let test= currentmains[this.goalhelper(maingoals, mainG)]\r\n            currentmains[this.goalhelper(maingoals, mainG)].goals.push(goal);\r\n            break;\r\n        case \"delmain\":\r\n            currentmains[this.goalhelper(maingoals, mainG)].splice(this.goalhelper(maingoals, mainG), 1);\r\n            break;\r\n        case \"delgoal\":\r\n            currentmains[this.goalhelper(maingoals, mainG)].goals[this.goalhelper(mainG.goals, goal)].splice(this.goalhelper(mainG.goals, goal), 1);\r\n            break;\r\n        case \"updatemain\":\r\n            currentmains[this.goalhelper(maingoals, mainG)]= mainG;\r\n            break;\r\n        case \"updategoal\":\r\n            currentmains[this.goalhelper(maingoals, mainG)].goals[this.goalhelper(mainG.goals, goal)]= goal\r\n            break\r\n\r\n    }\r\n    return currentmains\r\n    }\r\n    goalhelper(compare, compare1){\r\n        debugger\r\n        let value;\r\n        for(let i=0; i<compare.length; i++){\r\n            if(compare[i]._id=== compare1._id){\r\n                value= i\r\n                break;\r\n            }\r\n            else{\r\n                value= false\r\n            }\r\n        }\r\n        return value\r\n\r\n    }\r\n\r\n \r\n}\r\n\r\nexport default new studentSevice();"]},"metadata":{},"sourceType":"module"}